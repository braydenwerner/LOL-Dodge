{"ast":null,"code":"var _jsxFileName = \"/home/breadone/Projects/LOL-Dodge/loldodge/client/src/AppProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, createContext, useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles, theme } from './styles/exports';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext('light');\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n\n  const [themeMode, setThemeMode] = useState(localStorage.getItem('theme') || 'light');\n  console.log(themeMode);\n  const currentTheme = theme[themeMode];\n  console.log(currentTheme);\n  useEffect(() => {\n    localStorage.setItem('theme', themeMode);\n  }, [themeMode]);\n\n  const toggleTheme = () => {\n    setThemeMode(oldTheme => {\n      if (oldTheme === 'light') {\n        return 'dark';\n      } else {\n        return 'light';\n      }\n    });\n  }; //  combine into one object for global ThemeContext state\n\n\n  const value = {\n    themeMode,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: (themeMode, toggleTheme),\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: currentTheme,\n      children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"TKEEIESwxd267taaPFWPZZ5pfJs=\");\n\n_c = AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/breadone/Projects/LOL-Dodge/loldodge/client/src/AppProvider.tsx"],"names":["React","useEffect","createContext","useState","ThemeProvider","GlobalStyles","theme","ThemeContext","AppProvider","children","themeMode","setThemeMode","localStorage","getItem","console","log","currentTheme","setItem","toggleTheme","oldTheme","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,SAASC,YAAT,EAAuBC,KAAvB,QAAoC,kBAApC;;AAEA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,OAAD,CAAlC;AAEP,OAAO,MAAMM,WAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CACxCS,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,OADO,CAA1C;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACA,QAAMM,YAAY,GAAIV,KAAD,CAAeI,SAAf,CAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BP,SAA9B;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,QAAMQ,WAAW,GAAG,MAAM;AACxBP,IAAAA,YAAY,CAAEQ,QAAD,IAAc;AACzB,UAAIA,QAAQ,KAAK,OAAjB,EAA0B;AACxB,eAAO,MAAP;AACD,OAFD,MAEO;AACL,eAAO,OAAP;AACD;AACF,KANW,CAAZ;AAOD,GARD,CAZqD,CAsBrD;;;AACA,QAAMC,KAAK,GAAG;AAAEV,IAAAA,SAAF;AAAaQ,IAAAA;AAAb,GAAd;AACA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,GAAGR,SAAS,EAAEQ,WAAd,CAA5B;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEF,YAAtB;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,EAEGP,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAhCM;;GAAMD,W;;KAAAA,W","sourcesContent":["import React, { useEffect, createContext, useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nimport { GlobalStyles, theme } from './styles/exports'\n\nexport const ThemeContext = createContext('light')\n\nexport const AppProvider: React.FC = ({ children }) => {\n  const [themeMode, setThemeMode] = useState(\n    localStorage.getItem('theme') || 'light'\n  )\n  console.log(themeMode)\n  const currentTheme = (theme as any)[themeMode]\n  console.log(currentTheme)\n\n  useEffect(() => {\n    localStorage.setItem('theme', themeMode)\n  }, [themeMode])\n\n  const toggleTheme = () => {\n    setThemeMode((oldTheme) => {\n      if (oldTheme === 'light') {\n        return 'dark'\n      } else {\n        return 'light'\n      }\n    })\n  }\n\n  //  combine into one object for global ThemeContext state\n  const value = { themeMode, toggleTheme }\n  return (\n    <ThemeContext.Provider value={(themeMode, toggleTheme)}>\n      <ThemeProvider theme={currentTheme}>\n        <GlobalStyles />\n        {children}\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}